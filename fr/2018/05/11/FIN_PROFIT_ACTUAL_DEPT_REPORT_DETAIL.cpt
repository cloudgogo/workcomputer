<?xml version="1.0" encoding="UTF-8"?>
<WorkBook xmlVersion="20151125" releaseVersion="8.0.0">
<TableDataMap>
<TableData name="ds_AMT" class="com.fr.data.impl.DBTableData">
<Parameters>
<Parameter>
<Attributes name="P_INCLUDE_UNPOSTED"/>
<O>
<![CDATA[Y]]></O>
</Parameter>
<Parameter>
<Attributes name="finElement"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="rowSetName"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_LEDGER"/>
<O>
<![CDATA[1001]]></O>
</Parameter>
<Parameter>
<Attributes name="P_PERIOD"/>
<O>
<![CDATA[2016-11]]></O>
</Parameter>
<Parameter>
<Attributes name="P_ROW_NUM"/>
<O>
<![CDATA[1]]></O>
</Parameter>
<Parameter>
<Attributes name="P_ROW_NAME"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_SEG2"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_CURRENCY"/>
<O>
<![CDATA[CNY]]></O>
</Parameter>
<Parameter>
<Attributes name="P_SEG1"/>
<O>
<![CDATA[130101]]></O>
</Parameter>
</Parameters>
<Attributes maxMemRowCount="-1"/>
<Connection class="com.fr.data.impl.NameDatabaseConnection">
<DatabaseName>
<![CDATA[HRS2]]></DatabaseName>
</Connection>
<Query>
<![CDATA[SELECT T.SEGMENT3, FFVV3.DESCRIPTION SEGMENT3_DESC, T.PERIOD_END A11_AMT, T.PERIOD_AMT A12_AMT
  FROM (SELECT RESULT.SEG1,
       RESULT.SEG2,
       RESULT.SEGMENT3,
       RESULT.ROW_NUM,
       RESULT.ROW_NAME,
       SUM(PERIOD_END) PERIOD_END,
       SUM(PERIOD_AMT) PERIOD_AMT
  FROM (select *
          from (SELECT T.SEG1,
                       T.SEG2,
                       T.SEGMENT3,
                       T.ROW_NUM,
                       T.ROW_NAME,
                       T.PERIOD_END + NVL(T.PERIOD_UNPOSTED, 0) PERIOD_END, --本期末+本期未过账
                       T.PERIOD_AMT + NVL(T.PERIOD_UNPOSTED, 0) PERIOD_AMT --本期发生+本期未过账
                  FROM (select 
                               V.COM1 SEG1,
                               V.COM2 SEG2,
                               GCC.SEGMENT3,
                               R.ROW_NUM,
                               R.ROW_NAME,
                               R.LINE_NUM,
                               SUM(DECODE(R.CHANGE_SIGN, 'Y', -1, 1) *
                                   DECODE(C.SIGN, '+', 1, -1) *
                                   DECODE(IC.SIGN, '+', 1, -1) *
                                   (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                    NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                    NVL(GB2.PERIOD_NET_DR, 0) -
                                    NVL(GB2.PERIOD_NET_CR, 0))) PERIOD_END,
                               SUM(DECODE(R.CHANGE_SIGN, 'Y', -1, 1) *
                                   DECODE(C.SIGN, '+', 1, -1) *
                                   DECODE(IC.SIGN, '+', 1, -1) *
                                   (NVL(GB2.PERIOD_NET_DR, 0) -
                                    NVL(GB2.PERIOD_NET_CR, 0))) PERIOD_AMT,
                               SUM(DECODE(R.CHANGE_SIGN, 'Y', -1, 1) *
                                   DECODE(C.SIGN, '+', 1, -1) *
                                   DECODE(IC.SIGN, '+', 1, -1) *
                                   NVL(GJ.ENTERED_AMT, 0)) PERIOD_UNPOSTED
                          FROM CUX.CUX_HRS_DEF_ROW_SET S,
                               CUX.CUX_HRS_DEF_ROW R,
                               CUX.CUX_HRS_DEF_ROW_CALCULATION C,
                               CUX.CUX_HRS_DEF_ITEM_CONTENT IC,
                               apps.gl_code_combinations GCC,
                               apps.gl_ledgers gl,
                               (SELECT R.ROW_ID,
                                       R.ATTRIBUTE1     LEDGER_ID,
                                       R.ATTRIBUTE2     COM1,
                                       IC.SEGMENT1_LOW,
                                       IC.SEGMENT1_HIGH,
                                       IC.SEGMENT2_LOW,
                                       IC.SEGMENT2_HIGH,
                                       R.ATTRIBUTE3     COM2,
                                       R.ATTRIBUTE4     COM4,
                                       R.ATTRIBUTE4
                                  FROM CUX.CUX_HRS_DEF_ROW_SET         RS,
                                       CUX.CUX_HRS_DEF_ROW             R,
                                       CUX.CUX_HRS_DEF_ROW_CALCULATION C,
                                       CUX.CUX_HRS_DEF_ITEM_HEADER     H,
                                       CUX.CUX_HRS_DEF_ITEM_CONTENT    IC
                                 WHERE RS.ROW_SET_NAME = 'ORG_P200V1'
                                   AND RS.ROW_SET_ID = R.ROW_SET_ID
                                   AND C.ROW_ID = R.ROW_ID
                                   AND R.DISPLAY_FLAG = 'Y'
                                   AND C.CAL_ITEM_CODE = H.ITEM_CODE
                                   AND H.ITEM_HEADER_ID = IC.ITEM_HEADER_ID
                                   AND R.ATTRIBUTE1 = ${P_LEDGER}
                                   AND R.ATTRIBUTE2 IN ('${P_SEG1}')
                                   AND R.ATTRIBUTE3 IN ('${P_SEG2}')) V,
                               CUX.CUX_HRS_ITEM_CONTENT_RANGE ICR,
                               apps.gl_balances gb2,
                               (SELECT jl.code_combination_id,
                                       SUM(NVL(ACCOUNTED_DR, 0) -
                                           NVL(ACCOUNTED_CR, 0)) ENTERED_AMT --取所有币种折算成本位币的金额
                                  FROM apps.gl_je_headers jh,
                                       apps.gl_je_lines   jl
                                 WHERE 1 = 1
                                   and jh.je_header_id = jl.je_header_id
                                   and jh.ledger_id = ${P_LEDGER}
                                   and jh.period_name = '${P_PERIOD}'
                                   and jh.actual_flag = 'A'
                                   and jl.period_name = jh.period_name
                                   AND jl.status != 'P'
                                   and decode('${P_INCLUDE_UNPOSTED}',
                                              'Y',
                                              1,
                                              0) = 1
                                 GROUP BY jl.code_combination_id) GJ
                        
                         WHERE S.ROW_SET_NAME = '${rowSetName}'
                           AND S.ROW_SET_ID = R.ROW_SET_ID
                           AND R.DISPLAY_FLAG = 'Y'
                           AND R.ROW_ID = C.ROW_ID
                           AND R.ROW_NUM = '${P_ROW_NUM}'  
                           AND R.ROW_NAME ='${P_ROW_NAME}'  
                           AND C.CAL_ITEM_CODE = IC.ITEM_CODE
                           and gl.ledger_id = ${P_LEDGER}
                           AND IC.ITEM_CONTENT_ID = ICR.ITEM_CONTENT_ID
                           AND GCC.SEGMENT1 between
                               NVL(ICR.SEGMENT1_LOW, GCC.SEGMENT1) AND
                               NVL(ICR.SEGMENT1_HIGH, GCC.SEGMENT1)
                           AND GCC.SEGMENT2 between
                               NVL(ICR.SEGMENT2_LOW, GCC.SEGMENT2) AND
                               NVL(ICR.SEGMENT2_HIGH, GCC.SEGMENT2)
                           AND GCC.SEGMENT3 between
                               NVL(ICR.SEGMENT3_LOW, GCC.SEGMENT3) AND
                               NVL(ICR.SEGMENT3_HIGH, GCC.SEGMENT3)
                           AND GCC.SEGMENT8 between
                               NVL(ICR.SEGMENT8_LOW, GCC.SEGMENT8) AND
                               NVL(ICR.SEGMENT8_HIGH, GCC.SEGMENT8)
                           AND GCC.CHART_OF_ACCOUNTS_ID =
                               gl.CHART_OF_ACCOUNTS_ID
                           and gcc.enabled_flag = 'Y'
                           and gcc.summary_flag = 'N'
                           AND GCC.SEGMENT1 BETWEEN V.SEGMENT1_LOW AND
                               V.SEGMENT1_HIGH
                           AND GCC.SEGMENT2 BETWEEN V.SEGMENT2_LOW AND
                               V.SEGMENT2_HIGH
                           and gb2.ledger_id(+) = ${P_LEDGER}
                           and gb2.code_combination_id(+) =
                               GCC.code_combination_id
                           and gb2.currency_code(+) = '${P_CURRENCY}'
                           and gb2.period_name(+) = '${P_PERIOD}'
                           and gb2.actual_flag(+) = 'A'
                           AND GJ.code_combination_id(+) =
                               GCC.code_combination_id
                           and '1000' in ('${finElement}')    

                         GROUP BY 
                                  V.COM1,
                                  V.COM2,
                                  GCC.SEGMENT3,
                                  R.ROW_NUM,
                                  R.ROW_NAME,
                                  R.LINE_NUM) T) T
        
        UNION ALL
        SELECT *
          FROM (select result.segment1 SEG1,
                       result.segment2 SEG2,
                       RESULT.SEGMENT3,
                       result.ROW_NUM,
                       result.ROW_NAME,
                       sum(sumamount) PERIOD_END,
                       sum(amount) PERIOD_AMT
                  from (select V.COM1 segment1,
                               V.COM2 segment2,
                               L.SEGMENT3,
                               R.ROW_NUM,
                               R.ROW_NAME,
                               R.LINE_NUM,
                               NVL(l.accounted_dr, 0) - NVL(l.accounted_cr, 0) amount,
                               0 sumamount
                          from CUX.CUX_HRS_DEF_ROW_SET         S,
                               CUX.CUX_HRS_DEF_ROW             R,
                               CUX.CUX_HRS_DEF_ROW_CALCULATION C,
                               CUX.CUX_HRS_DEF_ITEM_CONTENT    IC,
                               hrs_core_je_header              h,
                               hrs_core_je_line                l,
                               (SELECT R.ROW_ID,
                                       R.ATTRIBUTE1     LEDGER_ID,
                                       R.ATTRIBUTE2     COM1,
                                       IC.SEGMENT1_LOW,
                                       IC.SEGMENT1_HIGH,
                                       IC.SEGMENT2_LOW,
                                       IC.SEGMENT2_HIGH,
                                       R.ATTRIBUTE3     COM2,
                                       R.ATTRIBUTE4     COM4,
                                       R.ATTRIBUTE4
                                  FROM CUX.CUX_HRS_DEF_ROW_SET         RS,
                                       CUX.CUX_HRS_DEF_ROW             R,
                                       CUX.CUX_HRS_DEF_ROW_CALCULATION C,
                                       CUX.CUX_HRS_DEF_ITEM_HEADER     H,
                                       CUX.CUX_HRS_DEF_ITEM_CONTENT    IC
                                 WHERE RS.ROW_SET_NAME = 'ORG_P200V1'
                                   AND RS.ROW_SET_ID = R.ROW_SET_ID
                                   AND C.ROW_ID = R.ROW_ID
                                   AND R.DISPLAY_FLAG = 'Y'
                                   AND C.CAL_ITEM_CODE = H.ITEM_CODE
                                   AND H.ITEM_HEADER_ID = IC.ITEM_HEADER_ID
                                   AND R.ATTRIBUTE1 = ${P_LEDGER}
                                   AND R.ATTRIBUTE2 IN ('${P_SEG1}')
                                   AND R.ATTRIBUTE3 IN ('${P_SEG2}')) V
                         where S.ROW_SET_NAME = '${rowSetName}'
                           AND S.ROW_SET_ID = R.ROW_SET_ID
                           AND R.DISPLAY_FLAG = 'Y'
                           AND R.ROW_ID = C.ROW_ID
                           AND R.ROW_NUM = '${P_ROW_NUM}'  
                           AND R.ROW_NAME = '${P_ROW_NAME}'  
                           AND C.CAL_ITEM_CODE = IC.ITEM_CODE
                           and h.header_id = l.header_id
                           and l.segment1 between
                               nvl(ic.segment1_low, l.segment1) and
                               nvl(ic.segment1_high, l.segment1)
                           and l.segment2 between
                               nvl(ic.segment2_low, l.segment2) and
                               nvl(ic.segment2_high, l.segment2)
                           and l.segment3 between
                               nvl(ic.segment3_low, l.segment3) and
                               nvl(ic.segment3_high, l.segment3)
                           and l.segment8 between
                               nvl(ic.segment8_low, l.segment8) and
                               nvl(ic.segment8_high, l.segment8)
                           AND H.LEDGER_ID = ${P_LEDGER}
                           AND l.SEGMENT1 BETWEEN V.SEGMENT1_LOW AND
                               V.SEGMENT1_HIGH
                           AND l.SEGMENT2 BETWEEN V.SEGMENT2_LOW AND
                               V.SEGMENT2_HIGH
                           and l.fin_element in ('${finElement}') 
                           and h.period_name = '${P_PERIOD}'
                           AND H.CURRENCY_CODE = '${P_CURRENCY}'
                        union all
                        select V.COM1 segment1,
                               V.COM2 segment2,
                               L.SEGMENT3,
                               R.ROW_NUM,
                               R.ROW_NAME,
                               R.LINE_NUM,
                               0 amount,
                               sum(NVL(l.accounted_dr, 0) -
                                   NVL(l.accounted_cr, 0)) sumamount
                          from CUX.CUX_HRS_DEF_ROW_SET         S,
                               CUX.CUX_HRS_DEF_ROW             R,
                               CUX.CUX_HRS_DEF_ROW_CALCULATION C,
                               CUX.CUX_HRS_DEF_ITEM_CONTENT    IC,
                               hrs_core_je_header              h,
                               hrs_core_je_line                l,
                               (SELECT R.ROW_ID,
                                       R.ATTRIBUTE1     LEDGER_ID,
                                       R.ATTRIBUTE2     COM1,
                                       IC.SEGMENT1_LOW,
                                       IC.SEGMENT1_HIGH,
                                       IC.SEGMENT2_LOW,
                                       IC.SEGMENT2_HIGH,
                                       R.ATTRIBUTE3     COM2,
                                       R.ATTRIBUTE4     COM4,
                                       R.ATTRIBUTE4
                                  FROM CUX.CUX_HRS_DEF_ROW_SET         RS,
                                       CUX.CUX_HRS_DEF_ROW             R,
                                       CUX.CUX_HRS_DEF_ROW_CALCULATION C,
                                       CUX.CUX_HRS_DEF_ITEM_HEADER     H,
                                       CUX.CUX_HRS_DEF_ITEM_CONTENT    IC
                                 WHERE RS.ROW_SET_NAME = 'ORG_P200V1'
                                   AND RS.ROW_SET_ID = R.ROW_SET_ID
                                   AND C.ROW_ID = R.ROW_ID
                                   AND R.DISPLAY_FLAG = 'Y'
                                   AND C.CAL_ITEM_CODE = H.ITEM_CODE
                                   AND H.ITEM_HEADER_ID = IC.ITEM_HEADER_ID
                                   AND R.ATTRIBUTE1 = ${P_LEDGER}
                                   AND R.ATTRIBUTE2 IN ('${P_SEG1}')
                                   AND R.ATTRIBUTE3 IN ('${P_SEG2}')) V
                         where S.ROW_SET_NAME = '${rowSetName}'
                           AND S.ROW_SET_ID = R.ROW_SET_ID
                           AND R.DISPLAY_FLAG = 'Y'
                           AND R.ROW_ID = C.ROW_ID
                           AND R.ROW_NUM =  '${P_ROW_NUM}'   
                           AND R.ROW_NAME = '${P_ROW_NAME}' 
                           AND C.CAL_ITEM_CODE = IC.ITEM_CODE
                           and h.header_id = l.header_id
                           and l.segment1 between
                               nvl(ic.segment1_low, l.segment1) and
                               nvl(ic.segment1_high, l.segment1)
                           and l.segment2 between
                               nvl(ic.segment2_low, l.segment2) and
                               nvl(ic.segment2_high, l.segment2)
                           and l.segment3 between
                               nvl(ic.segment3_low, l.segment3) and
                               nvl(ic.segment3_high, l.segment3)
                           and l.segment8 between
                               nvl(ic.segment8_low, l.segment8) and
                               nvl(ic.segment8_high, l.segment8)
                           AND H.LEDGER_ID = ${P_LEDGER}
                           and l.fin_element in ('${finElement}') 
                           AND L.SEGMENT1 BETWEEN V.SEGMENT1_LOW AND
                               V.SEGMENT1_HIGH
                           AND L.SEGMENT2 BETWEEN V.SEGMENT2_LOW AND
                               V.SEGMENT2_HIGH
                           and h.period_name between
                               substr('${P_PERIOD}', 1, 4) || '-01' and
                               '${P_PERIOD}'
                           AND H.CURRENCY_CODE = '${P_CURRENCY}'
                         group by V.COM1,
                                  V.COM2,
                                  L.SEGMENT3,
                                  R.ROW_NUM,
                                  R.ROW_NAME,
                                  R.LINE_NUM
                        
                        ) result
                 group by result.segment1,
                          result.segment2,
                          RESULT.SEGMENT3,
                          result.ROW_NUM,
                          result.ROW_NAME,
                          result.LINE_NUM) T) RESULT
 GROUP BY RESULT.SEG1, RESULT.SEG2, RESULT.ROW_NUM, RESULT.ROW_NAME,RESULT.SEGMENT3) T,
       APPS.FND_FLEX_VALUES_VL FFVV3,
       APPS.FND_FLEX_VALUE_SETS FVS3
 WHERE 1 = 1
   AND FFVV3.FLEX_VALUE = T.SEGMENT3
   AND FFVV3.FLEX_VALUE_SET_ID = FVS3.FLEX_VALUE_SET_ID
   AND FVS3.FLEX_VALUE_SET_NAME = 'XXT_FIN_COA_ACCOUNT'
   AND (T.PERIOD_END <> 0 OR T.PERIOD_AMT<>0)
 order by T.SEGMENT3
]]></Query>
</TableData>
<TableData name="ds_TYPE" class="com.fr.data.impl.DBTableData">
<Parameters/>
<Attributes maxMemRowCount="-1"/>
<Connection class="com.fr.data.impl.NameDatabaseConnection">
<DatabaseName>
<![CDATA[HRS]]></DatabaseName>
</Connection>
<Query>
<![CDATA[SELECT IV.ITEM_VALUE, IV.DESCRIPTION
  FROM HRS_CORE_EXTERNAL_ITEM_TYPE T, HRS_CORE_EXTERNAL_ITEM_VALUE IV
 WHERE 1 = 1
   AND T.ITEM_TYPE_ID = IV.ITEM_TYPE_ID
   AND T.ITEM_TYPE = 'HRS_REPORT_DATA_TYPE'
   AND IV.ITEM_VALUE IN ('A10', 'A11', 'A12')
 ORDER BY IV.ITEM_VALUE ]]></Query>
</TableData>
<TableData name="ds_bak" class="com.fr.data.impl.DBTableData">
<Parameters>
<Parameter>
<Attributes name="P_INCLUDE_UNPOSTED"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_LEDGER"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_PERIOD"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_ROW_NUM"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_ROW_NAME"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_SEG2"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_CURRENCY"/>
<O>
<![CDATA[]]></O>
</Parameter>
<Parameter>
<Attributes name="P_SEG1"/>
<O>
<![CDATA[]]></O>
</Parameter>
</Parameters>
<Attributes maxMemRowCount="-1"/>
<Connection class="com.fr.data.impl.NameDatabaseConnection">
<DatabaseName>
<![CDATA[HRS1]]></DatabaseName>
</Connection>
<Query>
<![CDATA[SELECT T.SEGMENT3, FFVV3.DESCRIPTION SEGMENT3_DESC, T.A11_AMT, T.A12_AMT
  FROM (select V.PARENT_VALUE SEG1,
               R.ROW_NUM,
               R.ROW_NAME,
               GCC.SEGMENT3,
               SUM(DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0))))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))))) +
                   DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))))) A11_AMT,
               
               SUM(DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0))))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))))) +
                   DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))))) A12_AMT
          FROM CUX.CUX_HRS_DEF_ROW_SET S,
               CUX.CUX_HRS_DEF_ROW R,
               CUX.CUX_HRS_DEF_ROW_CALCULATION C,
               CUX.CUX_HRS_DEF_ITEM_CONTENT IC,
               apps.gl_code_combinations GCC,
               apps.gl_ledgers gl,
               apps.CUX_HRS_CORE_DIM_CHILD_V V,
               CUX.CUX_HRS_ITEM_CONTENT_RANGE ICR,
               apps.gl_balances gb2,
               (SELECT jl.code_combination_id,
                       SUM(NVL(ACCOUNTED_DR, 0) - NVL(ACCOUNTED_CR, 0)) ENTERED_AMT --取所有币种折算成本位币的金额
                  FROM apps.gl_je_headers jh, apps.gl_je_lines jl
                 WHERE 1 = 1
                   and jh.je_header_id = jl.je_header_id
                   and jh.ledger_id = ${P_LEDGER}
                   and jh.period_name = '${P_PERIOD}'
                   and jh.actual_flag = 'A'
                   and jl.period_name = jh.period_name
                   AND jl.status != 'P'
                   and decode('${P_INCLUDE_UNPOSTED}', 'Y', 1, 0) = 1
                 GROUP BY jl.code_combination_id) GJ
        
         WHERE S.ROW_SET_NAME = 'P100V1'
           AND S.ROW_SET_ID = R.ROW_SET_ID
           AND R.DISPLAY_FLAG = 'Y'
           AND R.ROW_ID = C.ROW_ID
           AND C.CAL_ITEM_CODE = IC.ITEM_CODE
           and gl.ledger_id = ${P_LEDGER}
           AND IC.ITEM_CONTENT_ID = ICR.ITEM_CONTENT_ID
           AND GCC.SEGMENT1 <= NVL(ICR.SEGMENT1_HIGH, GCC.SEGMENT1)
           AND GCC.SEGMENT1 >= NVL(ICR.SEGMENT1_LOW, GCC.SEGMENT1)
           AND GCC.SEGMENT2 <= NVL(ICR.SEGMENT2_HIGH, GCC.SEGMENT2)
           AND GCC.SEGMENT2 >= NVL(ICR.SEGMENT2_LOW, GCC.SEGMENT2)
           AND GCC.SEGMENT3 <= NVL(ICR.SEGMENT3_HIGH, GCC.SEGMENT3)
           AND GCC.SEGMENT3 >= NVL(ICR.SEGMENT3_LOW, GCC.SEGMENT3)
           AND GCC.SEGMENT8 <= NVL(ICR.SEGMENT8_HIGH, GCC.SEGMENT8)
           AND GCC.SEGMENT8 >= NVL(ICR.SEGMENT8_LOW, GCC.SEGMENT8)
           AND GCC.CHART_OF_ACCOUNTS_ID = gl.CHART_OF_ACCOUNTS_ID
           AND GJ.code_combination_id(+) = GCC.code_combination_id
           and gcc.enabled_flag = 'Y'
           and gcc.summary_flag = 'N'
           AND V.PARENT_VALUE = '${P_SEG1}'
           AND V.DIM_SEGMENT = 'SEGMENT1'
           AND GCC.SEGMENT1 = V.DIM_VALUE
           AND ${IF(LEN(P_SEG2) == 0,
                    "1=1",
                    " EXISTS (SELECT 1 FROM apps.CUX_HRS_CORE_DIM_CHILD_V  V2 WHERE V2.DIM_SEGMENT = 'SEGMENT2' AND GCC.SEGMENT2 = V2.DIM_VALUE AND V2.parent_value IN ('" +
                      P_SEG2 + "'))")
         }
           and gb2.ledger_id(+) = ${P_LEDGER}
           and gb2.code_combination_id(+) = GCC.code_combination_id
           and gb2.currency_code(+) = '${P_CURRENCY}'
           and gb2.period_name(+) = '${P_PERIOD}'
           and gb2.actual_flag(+) = 'A'
           AND R.ROW_NUM = '${P_ROW_NUM}'
           AND R.ROW_NAME = '${P_ROW_NAME}'
         GROUP BY V.PARENT_VALUE, R.ROW_NUM, R.ROW_NAME, GCC.SEGMENT3) T,
       APPS.FND_FLEX_VALUES_VL FFVV3,
       APPS.FND_FLEX_VALUE_SETS FVS3
 WHERE 1 = 1
   AND FFVV3.FLEX_VALUE = T.SEGMENT3
   AND FFVV3.FLEX_VALUE_SET_ID = FVS3.FLEX_VALUE_SET_ID
   AND FVS3.FLEX_VALUE_SET_NAME = 'XXT_FIN_COA_ACCOUNT'
   AND (T.A11_AMT <> 0 OR T.A12_AMT<>0)
 order by T.SEGMENT3
]]></Query>
</TableData>
<TableData name="ds_bak2" class="com.fr.data.impl.DBTableData">
<Parameters/>
<Attributes maxMemRowCount="-1"/>
<Connection class="com.fr.data.impl.NameDatabaseConnection">
<DatabaseName>
<![CDATA[HRS1]]></DatabaseName>
</Connection>
<Query>
<![CDATA[SELECT T.SEGMENT3, FFVV3.DESCRIPTION SEGMENT3_DESC, T.A11_AMT, T.A12_AMT
  FROM (select V.PARENT_VALUE SEG1,
               V2.PARENT_VALUE SEG2,
               R.ROW_NUM,
               R.ROW_NAME,
               GCC.SEGMENT3,
               SUM(DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0))))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.BEGIN_BALANCE_DR, 0) -
                                         NVL(GB2.BEGIN_BALANCE_CR, 0) +
                                         NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))))) +
                   DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))))) A11_AMT,
               
               SUM(DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0))))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)),
                                         -1 * (NVL(GB2.PERIOD_NET_DR, 0) -
                                         NVL(GB2.PERIOD_NET_CR, 0)))))) +
                   DECODE(R.CHANGE_SIGN,
                          'Y',
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))) * (-1),
                          DECODE(C.SIGN,
                                 '+',
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0))),
                                 -1 *
                                 (DECODE(IC.SIGN,
                                         '+',
                                         NVL(GJ.ENTERED_AMT, 0),
                                         -1 * NVL(GJ.ENTERED_AMT, 0)))))) A12_AMT
          FROM CUX.CUX_HRS_DEF_ROW_SET S,
               CUX.CUX_HRS_DEF_ROW R,
               CUX.CUX_HRS_DEF_ROW_CALCULATION C,
               CUX.CUX_HRS_DEF_ITEM_CONTENT IC,
               apps.gl_code_combinations GCC,
               apps.gl_ledgers gl,
               apps.CUX_HRS_CORE_DIM_CHILD_V V,
               apps.CUX_HRS_CORE_DIM_CHILD_V V2,
               CUX.CUX_HRS_ITEM_CONTENT_RANGE ICR,
               apps.gl_balances gb2,
               (SELECT jl.code_combination_id,
                       SUM(NVL(ACCOUNTED_DR, 0) - NVL(ACCOUNTED_CR, 0)) ENTERED_AMT --取所有币种折算成本位币的金额
                  FROM apps.gl_je_headers jh, apps.gl_je_lines jl
                 WHERE 1 = 1
                   and jh.je_header_id = jl.je_header_id
                   and jh.ledger_id = ${P_LEDGER}
                   and jh.period_name = '${P_PERIOD}'
                   and jh.actual_flag = 'A'
                   and jl.period_name = jh.period_name
                   AND jl.status != 'P'
                   and decode('${P_INCLUDE_UNPOSTED}', 'Y', 1, 0) = 1
                 GROUP BY jl.code_combination_id) GJ
        
         WHERE S.ROW_SET_NAME = '${rowSetName}'
           AND S.ROW_SET_ID = R.ROW_SET_ID
           AND R.DISPLAY_FLAG = 'Y'
           AND R.ROW_ID = C.ROW_ID
           AND C.CAL_ITEM_CODE = IC.ITEM_CODE
           and gl.ledger_id = ${P_LEDGER}
           AND IC.ITEM_CONTENT_ID = ICR.ITEM_CONTENT_ID
           AND GCC.SEGMENT1 <= NVL(ICR.SEGMENT1_HIGH, GCC.SEGMENT1)
           AND GCC.SEGMENT1 >= NVL(ICR.SEGMENT1_LOW, GCC.SEGMENT1)
           AND GCC.SEGMENT2 <= NVL(ICR.SEGMENT2_HIGH, GCC.SEGMENT2)
           AND GCC.SEGMENT2 >= NVL(ICR.SEGMENT2_LOW, GCC.SEGMENT2)
           AND GCC.SEGMENT3 <= NVL(ICR.SEGMENT3_HIGH, GCC.SEGMENT3)
           AND GCC.SEGMENT3 >= NVL(ICR.SEGMENT3_LOW, GCC.SEGMENT3)
           AND GCC.SEGMENT8 <= NVL(ICR.SEGMENT8_HIGH, GCC.SEGMENT8)
           AND GCC.SEGMENT8 >= NVL(ICR.SEGMENT8_LOW, GCC.SEGMENT8)
           AND GCC.CHART_OF_ACCOUNTS_ID = gl.CHART_OF_ACCOUNTS_ID
           AND GJ.code_combination_id(+) = GCC.code_combination_id
           and gcc.enabled_flag = 'Y'
           and gcc.summary_flag = 'N'
           AND V.PARENT_VALUE IN ('${P_SEG1}')
           AND V.DIM_SEGMENT = 'SEGMENT1'
           AND GCC.SEGMENT1 = V.DIM_VALUE
           AND V2.DIM_SEGMENT = 'SEGMENT2'
           AND GCC.SEGMENT2 = V2.DIM_VALUE
           AND V2.PARENT_VALUE IN ('${P_SEG2}')
           and gb2.ledger_id(+) = ${P_LEDGER}
           and gb2.code_combination_id(+) = GCC.code_combination_id
           and gb2.currency_code(+) = '${P_CURRENCY}'
           and gb2.period_name(+) = '${P_PERIOD}'
           and gb2.actual_flag(+) = 'A'
           AND R.ROW_NUM = '${P_ROW_NUM}'
           AND R.ROW_NAME = '${P_ROW_NAME}'
         GROUP BY V.PARENT_VALUE,V2.PARENT_VALUE, R.ROW_NUM, R.ROW_NAME, GCC.SEGMENT3) T,
       APPS.FND_FLEX_VALUES_VL FFVV3,
       APPS.FND_FLEX_VALUE_SETS FVS3
 WHERE 1 = 1
   AND FFVV3.FLEX_VALUE = T.SEGMENT3
   AND FFVV3.FLEX_VALUE_SET_ID = FVS3.FLEX_VALUE_SET_ID
   AND FVS3.FLEX_VALUE_SET_NAME = 'XXT_FIN_COA_ACCOUNT'
   AND (T.A11_AMT <> 0 OR T.A12_AMT<>0)
 order by T.SEGMENT3
]]></Query>
</TableData>
</TableDataMap>
<ReportWebAttr>
<Title>
<![CDATA[利润表--科目明细]]></Title>
<ServerPrinter/>
<WebPageContent>
<ToolBars>
<ToolBarManager>
<Location>
<Embed position="1"/>
</Location>
<ToolBar>
<Widget class="com.fr.report.web.button.ExcelO">
<WidgetAttr description="">
<PrivilegeControl/>
</WidgetAttr>
<Text>
<![CDATA[${i18n('Export-Excel-Simple')}]]></Text>
<IconName>
<![CDATA[excel]]></IconName>
</Widget>
</ToolBar>
</ToolBarManager>
</ToolBars>
<WebPage isPage="false" isShowAsImage="false" isAutoScale="false" isTDHeavy="false"/>
</WebPageContent>
<WebViewContent>
<ToolBars>
<ToolBarManager>
<Location>
<Embed position="1"/>
</Location>
<ToolBar>
<Widget class="com.fr.report.web.button.ExcelO">
<WidgetAttr description="">
<PrivilegeControl/>
</WidgetAttr>
<Text>
<![CDATA[${i18n('Export-Excel-Simple')}]]></Text>
<IconName>
<![CDATA[excel]]></IconName>
</Widget>
</ToolBar>
</ToolBarManager>
</ToolBars>
<SortFuncCheck check="true"/>
<ConditionFuncCheck check="true"/>
<ListFuncCheck check="true"/>
</WebViewContent>
</ReportWebAttr>
<Report class="com.fr.report.worksheet.WorkSheet" name="sheet1">
<ReportPageAttr>
<HR/>
<FR/>
<HC/>
<FC/>
</ReportPageAttr>
<ColumnPrivilegeControl/>
<RowPrivilegeControl/>
<RowHeight defaultValue="723900">
<![CDATA[288000,1440000,288000,0,0,288000,1008000,1008000,1008000,723900,723900]]></RowHeight>
<ColumnWidth defaultValue="2743200">
<![CDATA[576000,5760000,5760000,5760000,7200000,5040000,5040000,2743200,2743200,2743200,2743200]]></ColumnWidth>
<CellElementList>
<C c="0" r="0">
<PrivilegeControl/>
<Expand/>
</C>
<C c="1" r="1" cs="6" s="0">
<O>
<![CDATA[利润表--科目明细]]></O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="1" r="3" s="1">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[="账套：" + SQL("HRS1", "SELECT NAME FROM APPS.GL_LEDGERS WHERE LEDGER_ID=" + $P_LEDGER, 1, 1)]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="2" r="3">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[="期间：" + $P_PERIOD]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="3" r="3">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[="含未过账：" + IF($P_INCLUDE_UNPOSTED = "Y", "是", "否")]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="4" r="3" cs="3">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[="项目：" + $P_ROW_NAME]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="1" r="4">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[="公司：" + SQL("HRS1", "select DV.description from CUX.cux_hrs_core_dimension d, CUX.cux_hrs_core_dimension_value dv where d.dimension_id = dv.dimension_id and d.dimension_code = 'XXT_FIN_COA_COMPANY' AND DV.DIM_VALUE='" + $P_SEG1 + "'", 1, 1)]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="2" r="4" cs="5">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[="部门：" + SQL("HRS1", "select LISTAGG(DV.description, ';') WITHIN GROUP(ORDER BY NULL) from CUX.cux_hrs_core_dimension d, CUX.cux_hrs_core_dimension_value dv where d.dimension_id = dv.dimension_id and d.dimension_code = 'XXT_FIN_COA_COSTCENTER' AND DV.DIM_VALUE IN ('" + $P_SEG2 + "')", 1, 1)]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="1" r="6" s="2">
<O>
<![CDATA[会计科目]]></O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="2" r="6" cs="3" s="2">
<O>
<![CDATA[会计科目描述]]></O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="5" r="6" s="2">
<O>
<![CDATA[本期实际]]></O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="6" r="6" s="2">
<O>
<![CDATA[本年余额]]></O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="1" r="7" s="3">
<O t="DSColumn">
<Attributes dsName="ds_AMT" columnName="SEGMENT3"/>
<Complex/>
<RG class="com.fr.report.cell.cellattr.core.group.FunctionGrouper"/>
<Parameters/>
</O>
<PrivilegeControl/>
<Expand dir="0"/>
</C>
<C c="2" r="7" cs="3" s="4">
<O t="DSColumn">
<Attributes dsName="ds_AMT" columnName="SEGMENT3_DESC"/>
<Complex/>
<RG class="com.fr.report.cell.cellattr.core.group.FunctionGrouper"/>
<Parameters/>
</O>
<PrivilegeControl/>
<Expand dir="0"/>
</C>
<C c="5" r="7" s="5">
<O t="DSColumn">
<Attributes dsName="ds_AMT" columnName="A12_AMT"/>
<Complex/>
<RG class="com.fr.report.cell.cellattr.core.group.FunctionGrouper"/>
<Parameters/>
</O>
<PrivilegeControl/>
<HighlightList>
<Highlight class="com.fr.report.cell.cellattr.highlight.DefaultHighlight">
<Name>
<![CDATA[条件属性1]]></Name>
<Condition class="com.fr.data.condition.FormulaCondition">
<Formula>
<![CDATA[1!=1]]></Formula>
</Condition>
<HighlightAction class="com.fr.report.cell.cellattr.highlight.HyperlinkHighlightAction">
<NameJavaScriptGroup>
<NameJavaScript name="网络报表1">
<JavaScript class="com.fr.js.ReportletHyperlink">
<JavaScript class="com.fr.js.ReportletHyperlink">
<Parameters>
<Parameter>
<Attributes name="P_LEDGER"/>
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=$P_LEDGER]]></Attributes>
</O>
</Parameter>
<Parameter>
<Attributes name="P_SEG1"/>
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=$P_SEG1]]></Attributes>
</O>
</Parameter>
<Parameter>
<Attributes name="P_SEG2"/>
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=$P_SEG2]]></Attributes>
</O>
</Parameter>
<Parameter>
<Attributes name="P_SEG3"/>
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=B8]]></Attributes>
</O>
</Parameter>
<Parameter>
<Attributes name="P_PERIOD"/>
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=$P_PERIOD]]></Attributes>
</O>
</Parameter>
<Parameter>
<Attributes name="P_INCLUDE_UNPOSTED"/>
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=$P_INCLUDE_UNPOSTED]]></Attributes>
</O>
</Parameter>
</Parameters>
<TargetFrame>
<![CDATA[_blank]]></TargetFrame>
<Features width="600" height="400"/>
<ReportletName byPost="true">
<![CDATA[/FIN_REPORT /FIN_EBS_REPORT/FIN_BALANCE_JE.cpt&__bypagesize__=false]]></ReportletName>
</JavaScript>
</JavaScript>
</NameJavaScript>
</NameJavaScriptGroup>
</HighlightAction>
<HighlightAction class="com.fr.report.cell.cellattr.highlight.FRFontHighlightAction">
<FRFont name="微软雅黑" style="0" size="72" foreground="-13408513" underline="1"/>
</HighlightAction>
</Highlight>
</HighlightList>
<Expand dir="0"/>
</C>
<C c="6" r="7" s="5">
<O t="DSColumn">
<Attributes dsName="ds_AMT" columnName="A11_AMT"/>
<Complex/>
<RG class="com.fr.report.cell.cellattr.core.group.FunctionGrouper"/>
<Parameters/>
</O>
<PrivilegeControl/>
<Expand dir="0"/>
</C>
<C c="1" r="8" cs="4" s="6">
<O>
<![CDATA[合计]]></O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="5" r="8" s="7">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=SUM(F8)]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
<C c="6" r="8" s="7">
<O t="Formula" class="Formula">
<Attributes>
<![CDATA[=SUM(G8)]]></Attributes>
</O>
<PrivilegeControl/>
<Expand/>
</C>
</CellElementList>
<ReportAttrSet>
<ReportSettings headerHeight="0" footerHeight="0">
<PaperSetting/>
</ReportSettings>
<Header reportPageType="0">
<Background name="NullBackground"/>
<LeftList/>
<CenterList/>
<RightList/>
</Header>
<Footer reportPageType="0">
<Background name="NullBackground"/>
<LeftList/>
<CenterList/>
<RightList/>
</Footer>
</ReportAttrSet>
<PrivilegeControl/>
</Report>
<ReportParameterAttr>
<Attributes showWindow="true" delayPlaying="true" windowPosition="1" align="0"/>
<PWTitle>
<![CDATA[参数]]></PWTitle>
</ReportParameterAttr>
<StyleList>
<Style horizontal_alignment="2" imageLayout="1" paddingLeft="12">
<FRFont name="微软雅黑" style="0" size="112"/>
<Background name="ColorBackground" color="-986896"/>
<Border>
<Bottom style="5" color="-4144960"/>
</Border>
</Style>
<Style horizontal_alignment="2" imageLayout="1">
<FRFont name="SimSun" style="0" size="72"/>
<Background name="NullBackground"/>
<Border/>
</Style>
<Style horizontal_alignment="0" imageLayout="1">
<FRFont name="微软雅黑" style="0" size="72" foreground="-1"/>
<Background name="ColorBackground" color="-12478742"/>
<Border>
<Top style="1" color="-1"/>
<Bottom style="1" color="-1"/>
<Left style="1" color="-1"/>
<Right style="1" color="-1"/>
</Border>
</Style>
<Style horizontal_alignment="2" imageLayout="1" paddingLeft="6">
<FRFont name="微软雅黑" style="0" size="72"/>
<Background name="ColorBackground" color="-1"/>
<Border>
<Top style="1" color="-4144960"/>
<Bottom style="1" color="-4144960"/>
<Left style="1" color="-4144960"/>
<Right style="1" color="-4144960"/>
</Border>
</Style>
<Style style_name="A-HRS-head3-T"/>
<Style horizontal_alignment="4" imageLayout="1">
<Format class="com.fr.base.CoreDecimalFormat">
<![CDATA[#,##0.00]]></Format>
<FRFont name="微软雅黑" style="0" size="72"/>
<Background name="ColorBackground" color="-1"/>
<Border>
<Top style="1" color="-4144960"/>
<Bottom style="1" color="-4144960"/>
<Left style="1" color="-4144960"/>
<Right style="1" color="-4144960"/>
</Border>
</Style>
<Style style_name="A-HRS-head5-SUM"/>
<Style horizontal_alignment="4" imageLayout="1" paddingLeft="6">
<Format class="com.fr.base.CoreDecimalFormat">
<![CDATA[#,##0.00]]></Format>
<FRFont name="微软雅黑" style="0" size="72"/>
<Background name="ColorBackground" color="-9389828"/>
<Border>
<Top style="1" color="-4144960"/>
<Bottom style="1" color="-4144960"/>
<Left style="1" color="-4144960"/>
<Right style="1" color="-4144960"/>
</Border>
</Style>
</StyleList>
<DesignerVersion DesignerVersion="IAA"/>
<PreviewType PreviewType="0"/>
<TemplateID TemplateID="671c13b0-5bef-4196-bf1d-39f14807cdfc"/>
</WorkBook>
